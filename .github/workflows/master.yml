# Master workflow
#
# Runs when a PR has been merged to the master branch.
#
# 1. Generates a release build.
# 2. If the last commit is a chore(release), publish.

name: Master

on:
  push:
    branches:
      - master

env:
  # Run all cargo commands with --verbose.
  CARGO_TERM_VERBOSE: true
  RUST_BACKTRACE: 1

jobs:
  build_win_mac:
    if: github.repository_owner == 'maidsafe'
    name: Build Windows & macOS
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest, macOS-latest]
        include:
          - os: windows-latest
            build-script: make build
            target: x86_64-pc-windows-msvc
          - os: macOS-latest
            build-script: make build
            target: x86_64-apple-darwin
    steps:
      - uses: actions/checkout@v2

      # Install Rust
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true

      # Cache.
      - name: Cargo cache registry, index and build
        if: matrix.os != 'macOS-latest'
        uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-cache-${{ hashFiles('**/Cargo.lock') }}

      # Run build.
      - shell: bash
        run: ${{ matrix.build-script }}

      # Upload artifacts.
      - uses: actions/upload-artifact@master
        with:
          name: sn_node-${{ matrix.target }}-prod
          path: artifacts

  build_linux:
    if: github.repository_owner == 'maidsafe'
    name: Build_Linux
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]
        include:
          - os: ubuntu-latest
            build-script: make musl
            target: x86_64-unknown-linux-musl
    steps:
      - uses: actions/checkout@v2

      # Install Rust
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true

      # Cache.
      - name: Cargo cache registry, index and build
        if: matrix.os != 'macOS-latest'
        uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-cache-${{ hashFiles('**/Cargo.lock') }}

      # Run build.
      - shell: bash
        run: ${{ matrix.build-script }}

      # Upload artifacts.
      - uses: actions/upload-artifact@master
        with:
          name: sn_node-${{ matrix.target }}-prod
          path: artifacts

  # Deploy to GH Release and S3 if we're on a `chore(release):` commit
  deploy:
    if: |
      github.repository_owner == 'maidsafe' &&
      startsWith(github.event.head_commit.message, 'chore(release):')
    name: Deploy
    runs-on: ubuntu-latest
    needs: [build_win_mac, build_linux]
    env:
      AWS_ACCESS_KEY_ID: AKIAVVODCRMSJ5MV63VB
      AWS_SECRET_ACCESS_KEY: ${{ secrets.DEPLOY_USER_SECRET_ACCESS_KEY }}
      AWS_DEFAULT_REGION: eu-west-2
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      # Checkout and get all the artifacts built in the previous jobs.
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@master
        with:
          name: sn_node-x86_64-pc-windows-msvc-prod
          path: artifacts/prod/x86_64-pc-windows-msvc/release
      - uses: actions/download-artifact@master
        with:
          name: sn_node-x86_64-unknown-linux-musl-prod
          path: artifacts/prod/x86_64-unknown-linux-musl/release
      - uses: actions/download-artifact@master
        with:
          name: sn_node-x86_64-apple-darwin-prod
          path: artifacts/prod/x86_64-apple-darwin/release

      # Get information for the release.
      - shell: bash
        id: commit_message
        run: |
          commit_message=$(git log --format=%B -n 1 ${{ github.sha }})
          echo "::set-output name=commit_message::$commit_message"
      - shell: bash
        id: versioning
        run: |
          version=$(grep "^version" < Cargo.toml | head -n 1 | awk '{ print $3 }' | sed 's/\"//g')
          echo "::set-output name=version::$version"

      # Create `deploy` directory and put the artifacts into tar/zip archives for deployment with the release.
      - name: chmod
        shell: bash
        run: chmod -R +x artifacts/prod
      - shell: bash
        run: make package-version-artifacts-for-deploy

      # Get release description (requires generated archives)
      - shell: bash
        id: release_description
        run: |
          description=$(./scripts/get_release_description.sh ${{ steps.versioning.outputs.version }})
          description="${description//'%'/'%25'}"
          description="${description//$'\n'/'%0A'}"
          description="${description//$'\r'/'%0D'}"
          echo "::set-output name=description::$description"

      # Upload all the release archives to S3
      - name: Upload archives to S3
        run: aws s3 sync deploy/prod s3://sn-node --acl public-read

      # Create the release and attach sn_node archives as assets.
      - uses: csexton/create-release@add-body
        id: create_release
        with:
          tag_name: ${{ steps.versioning.outputs.version }}
          release_name: sn_node
          draft: false
          prerelease: false
          body: ${{ steps.release_description.outputs.description }}

      # Upload zip files
      - uses: actions/upload-release-asset@v1.0.1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: deploy/prod/sn_node-${{ steps.versioning.outputs.version }}-x86_64-unknown-linux-musl.zip
          asset_name: sn_node-${{ steps.versioning.outputs.version }}-x86_64-unknown-linux-musl.zip
          asset_content_type: application/zip

      - uses: actions/upload-release-asset@v1.0.1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: deploy/prod/sn_node-${{ steps.versioning.outputs.version }}-x86_64-pc-windows-msvc.zip
          asset_name: sn_node-${{ steps.versioning.outputs.version }}-x86_64-pc-windows-msvc.zip
          asset_content_type: application/zip

      - uses: actions/upload-release-asset@v1.0.1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: deploy/prod/sn_node-${{ steps.versioning.outputs.version }}-x86_64-apple-darwin.zip
          asset_name: sn_node-${{ steps.versioning.outputs.version }}-x86_64-apple-darwin.zip
          asset_content_type: application/zip

      # Upload tar files
      - uses: actions/upload-release-asset@v1.0.1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: deploy/prod/sn_node-${{ steps.versioning.outputs.version }}-x86_64-unknown-linux-musl.tar.gz
          asset_name: sn_node-${{ steps.versioning.outputs.version }}-x86_64-unknown-linux-musl.tar.gz
          asset_content_type: application/zip

      - uses: actions/upload-release-asset@v1.0.1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: deploy/prod/sn_node-${{ steps.versioning.outputs.version }}-x86_64-pc-windows-msvc.tar.gz
          asset_name: sn_node-${{ steps.versioning.outputs.version }}-x86_64-pc-windows-msvc.tar.gz
          asset_content_type: application/zip

      - uses: actions/upload-release-asset@v1.0.1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: deploy/prod/sn_node-${{ steps.versioning.outputs.version }}-x86_64-apple-darwin.tar.gz
          asset_name: sn_node-${{ steps.versioning.outputs.version }}-x86_64-apple-darwin.tar.gz
          asset_content_type: application/zip

  # Publish if we're on a `chore(release):` commit
  publish:
    name: Publish
    runs-on: ubuntu-latest
    needs: [deploy]
    if: |
      github.repository_owner == 'maidsafe' &&
      startsWith(github.event.head_commit.message, 'chore(release):')
    steps:
      - uses: actions/checkout@v2
      # checkout with fetch-depth: '0' to be sure to retrieve all commits to look for the semver commit message
        with:
          fetch-depth: '0'

      # Install Rust
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true

      # Publish to crates.io.
      - name: Cargo Login
        run: cargo login ${{ secrets.CRATES_IO_TOKEN }}

      - name: Cargo Publish
        run: cargo publish --allow-dirty
